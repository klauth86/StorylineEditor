<!--
StorylineEditor
Copyright (C) 2023 Pentangle Studio

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
    
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:StorylineEditor.App.Controls"
                    xmlns:m="clr-namespace:StorylineEditor.Model;assembly=StorylineEditor.Model"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <Style TargetType="GroupBox" x:Key="S_GroupBox_Prop">
        <Setter Property="Margin" Value="{StaticResource Thickness_Margin_2x}"></Setter>
    </Style>

    <DataTemplate x:Key="DT_GroupBox_HeaderTemplate_Player">
        <TextBlock Text="{Binding UpdateSourceTrigger=PropertyChanged}" FontWeight="Bold" TextWrapping="Wrap" FontSize="{StaticResource FontSize_VerySmall}"></TextBlock>
    </DataTemplate>

    <DataTemplate x:Key="DT_GroupBox_HeaderTemplate_Prop">
        <TextBlock Margin="{StaticResource Thickness_Margin_1x}" Text="{Binding UpdateSourceTrigger=PropertyChanged}" FontWeight="Bold" TextWrapping="Wrap"></TextBlock>
    </DataTemplate>

    <DataTemplate x:Key="DT_GroupBox_HeaderTemplate_Prop_Rich">
        <StackPanel Orientation="Horizontal">
            <TextBlock Margin="{StaticResource Thickness_Margin_1x}" Text="{Binding UpdateSourceTrigger=PropertyChanged}" FontWeight="Bold" TextWrapping="Wrap"></TextBlock>
            <Button Style="{StaticResource S_Button_Square_Auto}" Command="EditingCommands.ToggleBold" ToolTip="{DynamicResource String_Bold_Tooltip}" FontFamily="{StaticResource FontFamily_Button_Prop_Rich_Command}"
                    CommandTarget="{Binding Content, RelativeSource={RelativeSource AncestorType=GroupBox}}">
                <TextBlock FontWeight="Bold">B</TextBlock>
            </Button>
            <Button Style="{StaticResource S_Button_Square_Auto}" Command="EditingCommands.ToggleItalic" ToolTip="{DynamicResource String_Italic_Tooltip}" FontFamily="{StaticResource FontFamily_Button_Prop_Rich_Command}"
                    CommandTarget="{Binding Content, RelativeSource={RelativeSource AncestorType=GroupBox}}">
                <TextBlock FontStyle="Italic" FontWeight="Bold">I</TextBlock>
            </Button>
            <Button Style="{StaticResource S_Button_Square_Auto}" Command="EditingCommands.ToggleUnderline" ToolTip="{DynamicResource String_Underline_Tooltip}" FontFamily="{StaticResource FontFamily_Button_Prop_Rich_Command}"
                    CommandTarget="{Binding Content, RelativeSource={RelativeSource AncestorType=GroupBox}}">
                <TextBlock TextDecorations="Underline" FontWeight="Bold">U</TextBlock>
            </Button>
        </StackPanel>
    </DataTemplate>
    
    <Style TargetType="TextBox" x:Key="S_TextBox_Prop" BasedOn="{StaticResource S_TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <GroupBox Style="{StaticResource S_GroupBox_Prop}" Header="{TemplateBinding Tag}" HeaderTemplate="{StaticResource DT_GroupBox_HeaderTemplate_Prop}">
                        <TextBox Text="{Binding Text, RelativeSource={RelativeSource Mode=TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="{TemplateBinding TextWrapping}" MinLines="{TemplateBinding MinLines}"
                                 AcceptsReturn="{TemplateBinding AcceptsReturn}"></TextBox>
                    </GroupBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBox" x:Key="S_TextBox_Prop_Multiline" BasedOn="{StaticResource S_TextBox_Prop}">
        <Setter Property="MinLines" Value="3"></Setter>
        <Setter Property="AcceptsReturn" Value="true"></Setter>
    </Style>

    <DataTemplate x:Key="DT_ListBoxItem_CompositionType">
        <TextBlock x:Name="tb_Main"></TextBlock>
        <DataTemplate.Triggers>
            <Trigger SourceName="tb_Main" Property="DataContext" Value="{x:Static m:COMPOSITION_TYPE.AND}">
                <Setter TargetName="tb_Main" Property="Text" Value="{DynamicResource String_Tag_CompositionType_AND}"></Setter>
            </Trigger>
            <Trigger SourceName="tb_Main" Property="DataContext" Value="{x:Static m:COMPOSITION_TYPE.OR}">
                <Setter TargetName="tb_Main" Property="Text" Value="{DynamicResource String_Tag_CompositionType_OR}"></Setter>
            </Trigger>
            <Trigger SourceName="tb_Main" Property="DataContext" Value="{x:Static m:COMPOSITION_TYPE.XOR}">
                <Setter TargetName="tb_Main" Property="Text" Value="{DynamicResource String_Tag_CompositionType_XOR}"></Setter>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="DT_ListBoxItem_StorageType">
        <TextBlock x:Name="tb_Main"></TextBlock>
        <DataTemplate.Triggers>
            <Trigger SourceName="tb_Main" Property="DataContext" Value="{x:Static m:STORAGE_TYPE.GOOGLE_DRIVE}">
                <Setter TargetName="tb_Main" Property="Text" Value="{DynamicResource String_Tag_StorageType_GoogleDrive}"></Setter>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <x:Array x:Key="ARRAY_StorageTypes"  Type="{x:Type sys:Byte}">
        <x:Static Member="m:STORAGE_TYPE.GOOGLE_DRIVE"></x:Static>
    </x:Array>

    <Style TargetType="ComboBox" x:Key="S_ComboBox_StorageTypes">
        <Setter Property="SelectedIndex" Value="0"></Setter>
        <Setter Property="ItemTemplate" Value="{StaticResource DT_ListBoxItem_StorageType}"></Setter>
        <Setter Property="ItemsSource" Value="{StaticResource ARRAY_StorageTypes}"></Setter>
    </Style>

    <Style TargetType="ContentControl" x:Key="S_ContentControl_Prop_StorageType">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <GroupBox Style="{StaticResource S_GroupBox_Prop}" Header="{TemplateBinding Tag}" HeaderTemplate="{StaticResource DT_GroupBox_HeaderTemplate_Prop}">
                        <ComboBox SelectedValue="{Binding Path=DataContext.FileStorageType, RelativeSource={RelativeSource Mode=TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_ComboBox_StorageTypes}"></ComboBox>
                    </GroupBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ContentControl" x:Key="S_ContentControl_Indicator_IsDownloading">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Label
                        Content="{DynamicResource String_Tag_IsDownloading}"
                        FontSize="{StaticResource FontSize_Large}"
                        Foreground="{StaticResource Color_IsDownloading_Indicator}"
                        >
                        <Label.RenderTransform>
                            <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1" ScaleY="1"></ScaleTransform>
                        </Label.RenderTransform>
                        <Label.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard Name="stbrd_Indicator">
                                    <Storyboard>
                                        <DoubleAnimation AutoReverse="True" Storyboard.TargetProperty="(Label.RenderTransform).(ScaleTransform.ScaleX)" From="1" To="1.4" Duration="0:0:0.25" RepeatBehavior="Forever"/>
                                        <DoubleAnimation AutoReverse="True" Storyboard.TargetProperty="(Label.RenderTransform).(ScaleTransform.ScaleY)" From="1" To="1.4" Duration="0:0:0.25" RepeatBehavior="Forever"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Unloaded">
                                <StopStoryboard BeginStoryboardName="stbrd_Indicator"></StopStoryboard>
                            </EventTrigger>
                        </Label.Triggers>
                    </Label>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate TargetType="ContentControl" x:Key="CT_ContentControl_Comparer_List">
        <ItemsControl FontSize="{StaticResource FontSize_VeryLarge}" Margin="{StaticResource Thickness_Margin_2x}">
            <CheckBox VerticalContentAlignment="Center" x:Name="chb_less" Content="{DynamicResource String_Tag_CompareType_Less}" Command="{Binding CompareTypeCommand}" CommandParameter="{x:Static m:COMPARE_TYPE.LESS}"></CheckBox>
            <CheckBox VerticalContentAlignment="Center" x:Name="chb_lessequal" Content="{DynamicResource String_Tag_CompareType_LessOrEqual}" Command="{Binding CompareTypeCommand}" CommandParameter="{x:Static m:COMPARE_TYPE.LESS_OR_EQUAL}"></CheckBox>
            <CheckBox VerticalContentAlignment="Center" x:Name="chb_equal" Content="{DynamicResource String_Tag_CompareType_Equal}" Command="{Binding CompareTypeCommand}" CommandParameter="{x:Static m:COMPARE_TYPE.EQUAL}"></CheckBox>
            <CheckBox VerticalContentAlignment="Center" x:Name="chb_greaterequal" Content="{DynamicResource String_Tag_CompareType_EqualOrGreater}" Command="{Binding CompareTypeCommand}" CommandParameter="{x:Static m:COMPARE_TYPE.EQUAL_OR_GREATER}"></CheckBox>
            <CheckBox VerticalContentAlignment="Center" x:Name="chb_greater" Content="{DynamicResource String_Tag_CompareType_Greater}" Command="{Binding CompareTypeCommand}" CommandParameter="{x:Static m:COMPARE_TYPE.GREATER}"></CheckBox>
        </ItemsControl>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CompareType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static m:COMPARE_TYPE.LESS}">
                <Setter TargetName="chb_less" Property="IsChecked" Value="true"></Setter>
                <Setter TargetName="chb_less" Property="IsEnabled" Value="false"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_equal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_equal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_greater" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_greater" Property="IsEnabled" Value="true"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CompareType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static m:COMPARE_TYPE.LESS_OR_EQUAL}">
                <Setter TargetName="chb_less" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_less" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsChecked" Value="true"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsEnabled" Value="false"></Setter>
                <Setter TargetName="chb_equal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_equal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_greater" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_greater" Property="IsEnabled" Value="true"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CompareType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static m:COMPARE_TYPE.EQUAL}">
                <Setter TargetName="chb_less" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_less" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_equal" Property="IsChecked" Value="true"></Setter>
                <Setter TargetName="chb_equal" Property="IsEnabled" Value="false"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_greater" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_greater" Property="IsEnabled" Value="true"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CompareType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static m:COMPARE_TYPE.EQUAL_OR_GREATER}">
                <Setter TargetName="chb_less" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_less" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_equal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_equal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsChecked" Value="true"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsEnabled" Value="false"></Setter>
                <Setter TargetName="chb_greater" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_greater" Property="IsEnabled" Value="true"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CompareType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static m:COMPARE_TYPE.GREATER}">
                <Setter TargetName="chb_less" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_less" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_lessequal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_equal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_equal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsChecked" Value="false"></Setter>
                <Setter TargetName="chb_greaterequal" Property="IsEnabled" Value="true"></Setter>
                <Setter TargetName="chb_greater" Property="IsChecked" Value="true"></Setter>
                <Setter TargetName="chb_greater" Property="IsEnabled" Value="false"></Setter>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="ContentControl" x:Key="CT_ContentControl_Comparer_Value_Int">
        <StackPanel Orientation="Horizontal">
            <TextBox Margin="{StaticResource Thickness_Margin_1x}" MinWidth="{StaticResource Double_Size_32x}" Text="{Binding Text, RelativeSource={RelativeSource Mode=TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"></TextBox>
            <Button Style="{StaticResource S_Button_Square_Auto}" Grid.Column="1" Content="{StaticResource String_Icon_Plus}"></Button>
            <Button Style="{StaticResource S_Button_Square_Auto}" Grid.Column="2" Content="{StaticResource String_Icon_Minus}"></Button>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate TargetType="ContentControl" x:Key="CT_ContentControl_Comparer_Value_Float">
        <StackPanel Orientation="Horizontal">
            <TextBox Margin="{StaticResource Thickness_Margin_1x}" MinWidth="{StaticResource Double_Size_32x}" Text="{Binding Text, RelativeSource={RelativeSource Mode=TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"></TextBox>
            <Button Style="{StaticResource S_Button_Square_Auto}" Grid.Column="1" Content="{StaticResource String_Icon_Plus}"></Button>
            <Button Style="{StaticResource S_Button_Square_Auto}" Grid.Column="2" Content="{StaticResource String_Icon_Minus}"></Button>
        </StackPanel>
    </ControlTemplate>

    <Style TargetType="CheckBox" x:Key="S_CheckBox_Prop">
        <Setter Property="Margin" Value="{StaticResource Thickness_Margin_2x}"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="Content" Value="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}"></Setter>
    </Style>

    <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
        <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFECF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
    
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxToggleButtonPopup" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border CornerRadius="{StaticResource CornerRadius_Common}" x:Name="templateRoot" Background="{StaticResource Color_Add}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <Border CornerRadius="{StaticResource CornerRadius_Common}" x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" Margin="0" SnapsToDevicePixels="true">
                            <TextBlock x:Name="plus" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{StaticResource String_Icon_Plus}" Foreground="{StaticResource Color_Link_Foreground}"></TextBlock>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TabItem}}" Value="false">
                            <Setter Property="IsEnabled" Value="False"></Setter>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="plus" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="plus" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" TargetName="plus" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="controls:ComboBoxExt" BasedOn="{StaticResource {x:Type controls:ComboBoxExt}}" x:Key="S_ComboBoxExt_Prop_Filter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:ComboBoxExt">
                    <GroupBox Style="{StaticResource S_GroupBox_Prop}" Header="{TemplateBinding Tag}" HeaderTemplate="{StaticResource DT_GroupBox_HeaderTemplate_Prop}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="auto"></RowDefinition>
                                                <RowDefinition Height="*"></RowDefinition>
                                            </Grid.RowDefinitions>
                                            <TextBox Background="{StaticResource ComboBox.Static.Editable.Background}" Margin="0, 8, 0, 4" x:Name="tb_Filter" VerticalAlignment="Stretch" TextWrapping="Wrap" Text="{Binding Filter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=TemplatedParent}}"></TextBox>
                                            <TextBox Margin="0, 8, 0, 4" x:Name="tb_FilterPlaceholder" Style="{StaticResource S_TextBox_Filter_ToolTip}" Text="{DynamicResource String_Tag_ComboBoxExt_Filter_Tooltip}" Visibility="Collapsed"></TextBox>
                                            <ScrollViewer Grid.Row="1" x:Name="DropDownScrollViewer">
                                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Grid>
                                    </Border>
                                </theme:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                            <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </GroupBox>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="tb_Filter" Property="Text" Value="{x:Null}">
                            <Setter TargetName="tb_FilterPlaceholder" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger SourceName="tb_Filter" Property="Text" Value="">
                            <Setter TargetName="tb_FilterPlaceholder" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:ComboBoxExt" BasedOn="{StaticResource {x:Type controls:ComboBoxExt}}" x:Key="S_ComboBoxExt_Prop_Popup">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:ComboBoxExt">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                                    <ScrollViewer Grid.Row="1" x:Name="DropDownScrollViewer">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>
                        <ToggleButton Width="{StaticResource Double_Size_16x}" Height="{StaticResource Double_Size_16x}" x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButtonPopup}"/>
                        <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Tag}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>