<!--
Этот файл — часть StorylineEditor.

StorylineEditor — свободная программа: вы можете перераспространять ее и/или изменять ее на условиях Стандартной общественной лицензии GNU в том виде, 
в каком она была опубликована Фондом свободного программного обеспечения; либо версии 3 лицензии, либо (по вашему выбору) любой более поздней версии.

StorylineEditor распространяется в надежде, что она будет полезной, но БЕЗО ВСЯКИХ ГАРАНТИЙ; даже без неявной гарантии ТОВАРНОГО ВИДА или ПРИГОДНОСТИ ДЛЯ 
ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Подробнее см. в Стандартной общественной лицензии GNU.

Вы должны были получить копию Стандартной общественной лицензии GNU вместе с этой программой. Если это не так, см. <https://www.gnu.org/licenses/>.
-->
    
<Application x:Class="StorylineEditor.App.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:vm="clr-namespace:StorylineEditor.ViewModel;assembly=StorylineEditor.ViewModel"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <!-- Constants -->
        
        <sys:Boolean x:Key="True">True</sys:Boolean>

        <sys:Boolean x:Key="False">False</sys:Boolean>

        <SolidColorBrush x:Key="Color_Selector_Selected" Color="#99005500" />
        
        <!-- Global and base -->
        
        <Style TargetType="TextBlock" x:Key="S_TextBlock"></Style>

        <Style TargetType="TextBlock" BasedOn="{StaticResource S_TextBlock}" x:Key="S_TextBlock_GroupBox.Header"></Style>
        
        <Style TargetType="TextBox" x:Key="S_TextBox_Input"></Style>

        <Style TargetType="TextBox" x:Key="S_TextBox_MultilineInput" BasedOn="{StaticResource S_TextBox_Input}">
            <Setter Property="MinLines" Value="3"></Setter>
            <Setter Property="AcceptsReturn" Value="true"></Setter>
            <Setter Property="TextWrapping" Value="Wrap"></Setter>
        </Style>

        <Style TargetType="TextBox" x:Key="S_TextBox_Input_NumericUpDown_Float"></Style>
        
        <Style TargetType="GridSplitter" x:Key="S_GridSplitter">
            <Setter Property="HorizontalAlignment" Value="Center"></Setter>
            <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
            <Setter Property="Width" Value="4"></Setter>
        </Style>

        <Style TargetType="Button" x:Key="S_Button_GroupBox.Header"></Style>

        
        
        <!-- Items -->
        
        <Style TargetType="Border" x:Key="S_Border_Selector"></Style>

        <Style TargetType="TextBlock" x:Key="S_TextBlock_Selector_Icon"></Style>

        <Style TargetType="TextBlock" x:Key="S_TextBlock_Selector_Name"></Style>
        
        
        
        <!-- Main Menu -->
        
        <Style TargetType="Button" x:Key="S_Button_MainMenu"></Style>

        <Style TargetType="Separator" x:Key="S_Separator_MainMenu">
            <Setter Property="Width" Value="16"></Setter>
        </Style>

        <Style TargetType="Button" x:Key="S_Button_TabMenu"></Style>

        <Style TargetType="TextBox" BasedOn="{StaticResource S_TextBox_Input}" x:Key="S_TextBox_Input_Filter"></Style>

        
        
        <!-- Data Templates -->

        <ItemsPanelTemplate x:Key="IPT_WrapPanel">
            <WrapPanel></WrapPanel>
        </ItemsPanelTemplate>
        
        <DataTemplate DataType="{x:Type vm:StorylineVM}" x:Key="DT_StorylineVM_Tabs">
            <StackPanel Orientation="Horizontal">
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding CharactersTabCommand}">Characters</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding ItemsTabCommand}">Items</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding ActorsTabCommand}">Actors</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding JournalTabCommand}">Journal</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding DialogsTabCommand}">Dialogs</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding ReplicasTabCommand}">Replicas</Button>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:StorylineVM}" x:Key="DT_StorylineVM_Filter">
            <TextBox Style="{StaticResource S_TextBox_Input_Filter}" Text="{Binding Filter, UpdateSourceTrigger=PropertyChanged}"></TextBox>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:StorylineVM}" x:Key="DT_StorylineVM_Selection">
            <ContentControl Content="{Binding Selection, UpdateSourceTrigger=PropertyChanged}"></ContentControl>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:CollectionVM}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="auto"></ColumnDefinition>
                    <ColumnDefinition Width="5*"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Style="{StaticResource S_TextBlock_GroupBox.Header}"></TextBlock>
                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding UpCommand}">Up</Button>

                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding AddCommand}" CommandParameter="{StaticResource False}">A</Button>
                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding AddCommand}" CommandParameter="{StaticResource True}">AF</Button>
                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding RemoveCommand}">R</Button>

                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding CutCommand}" CommandParameter="{Binding Selection, UpdateSourceTrigger=PropertyChanged}">C</Button>
                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding PasteCommand}" CommandParameter="{Binding Selection, UpdateSourceTrigger=PropertyChanged}">P</Button>

                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding InfoCommand}" CommandParameter="{Binding Selection, UpdateSourceTrigger=PropertyChanged}">I</Button>
                    </StackPanel>

                    <GroupBox Grid.Row="1">
                        <GroupBox.Header>1
                        </GroupBox.Header>

                        <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsControl ItemsSource="{Binding ItemsVMs}"></ItemsControl>
                        </ScrollViewer>
                    </GroupBox>
                </Grid>

                <GridSplitter Grid.Column="1" Style="{StaticResource S_GridSplitter}"></GridSplitter>

                <ContentControl Grid.Column="2" Content="{Binding SelectionEditor, UpdateSourceTrigger=PropertyChanged}"></ContentControl>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:FolderVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftDoubleClick" Command="{Binding Path=DataContext.SetContextCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}"
                                  CommandParameter="{Binding}"/>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="🗀" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:FolderEditorVM}">
            <StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
            </StackPanel>
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type vm:CharacterVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="👥" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:CharacterEditorVM}">
            <StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <CheckBox IsChecked="{Binding HasDescriptionFemale, UpdateSourceTrigger=PropertyChanged}">HasDescriptionFemale</CheckBox>
                <TextBox Text="{Binding DescriptionFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <TextBox Text="{Binding ActorName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding ClassPathName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding InitialRelation, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input_NumericUpDown_Float}"></TextBox>
                <TextBox Text="{Binding InitialRelationFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input_NumericUpDown_Float}"></TextBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ActorVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="🧊" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ActorEditorVM}">
            <StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <CheckBox IsChecked="{Binding HasDescriptionFemale, UpdateSourceTrigger=PropertyChanged}">HasDescriptionFemale</CheckBox>
                <TextBox Text="{Binding DescriptionFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <TextBox Text="{Binding ActorName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding ClassPathName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
            </StackPanel>
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type vm:ItemVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="💰" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ItemEditorVM}">
            <StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <CheckBox IsChecked="{Binding HasDescriptionFemale, UpdateSourceTrigger=PropertyChanged}">HasDescriptionFemale</CheckBox>
                <TextBox Text="{Binding DescriptionFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <TextBox Text="{Binding ActorName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding ClassPathName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <CheckBox IsChecked="{Binding HasInternalDescription, UpdateSourceTrigger=PropertyChanged}">HasInternalDescription</CheckBox>
                <TextBox Text="{Binding InternalDescription, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <CheckBox IsChecked="{Binding HasInternalDescriptionFemale, UpdateSourceTrigger=PropertyChanged}">HasInternalDescriptionFemale</CheckBox>
                <TextBox Text="{Binding InternalDescriptionFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
            </StackPanel>
        </DataTemplate>
        
    </Application.Resources>
</Application>