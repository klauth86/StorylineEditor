<!--
Этот файл — часть StorylineEditor.

StorylineEditor — свободная программа: вы можете перераспространять ее и/или изменять ее на условиях Стандартной общественной лицензии GNU в том виде, 
в каком она была опубликована Фондом свободного программного обеспечения; либо версии 3 лицензии, либо (по вашему выбору) любой более поздней версии.

StorylineEditor распространяется в надежде, что она будет полезной, но БЕЗО ВСЯКИХ ГАРАНТИЙ; даже без неявной гарантии ТОВАРНОГО ВИДА или ПРИГОДНОСТИ ДЛЯ 
ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Подробнее см. в Стандартной общественной лицензии GNU.

Вы должны были получить копию Стандартной общественной лицензии GNU вместе с этой программой. Если это не так, см. <https://www.gnu.org/licenses/>.
-->
    
<Application x:Class="StorylineEditor.App.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:vm="clr-namespace:StorylineEditor.ViewModel;assembly=StorylineEditor.ViewModel"
             xmlns:vmg="clr-namespace:StorylineEditor.ViewModel.Graphs;assembly=StorylineEditor.ViewModel"
             xmlns:vmn="clr-namespace:StorylineEditor.ViewModel.Nodes;assembly=StorylineEditor.ViewModel"
             xmlns:m="clr-namespace:StorylineEditor.Model;assembly=StorylineEditor.Model"
             xmlns:mn="clr-namespace:StorylineEditor.Model.Nodes;assembly=StorylineEditor.Model"
             xmlns:bhvrs="clr-namespace:StorylineEditor.App.Behaviors"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <!-- Constants -->

        <sys:Double x:Key="Double_Node_MinHeight">64</sys:Double>

        <sys:Double x:Key="Double_Node_MinWidth">96</sys:Double>
        
        <sys:Double x:Key="Double_Node_MaxHeight">256</sys:Double>

        <sys:Double x:Key="Double_Node_MaxWidth">256</sys:Double>

        <sys:String x:Key="String_Icon_Node_Step">✔</sys:String>

        <sys:String x:Key="String_Icon_Node_Alternative">💡</sys:String>

        <sys:Boolean x:Key="True">True</sys:Boolean>

        <sys:Boolean x:Key="False">False</sys:Boolean>

        <SolidColorBrush x:Key="Color_Selector_Selected" Color="#99005500" />

        <SolidColorBrush x:Key="Color_Node_Selected" Color="#99005500" />

        <SolidColorBrush x:Key="Color_PreviewLink_Base" Color="Goldenrod" />

        <SolidColorBrush x:Key="Color_PreviewLink_Allow" Color="Green" />

        <SolidColorBrush x:Key="Color_PreviewLink_Disallow" Color="Red" />

        <sys:Double x:Key="Double_PreviewLink_MinHeight">16</sys:Double>

        <sys:Double x:Key="Double_PreviewLink_MinWidth">16</sys:Double>

        <sys:Double x:Key="Double_PreviewLink_StrokeThickness">2</sys:Double>
        
        

        <!-- Global and base -->

        <Style TargetType="TextBlock" x:Key="S_TextBlock"></Style>

        <Style TargetType="TextBlock" BasedOn="{StaticResource S_TextBlock}" x:Key="S_TextBlock_GroupBox.Header"></Style>

        <Style TargetType="TextBox" x:Key="S_TextBox_Input"></Style>

        <Style TargetType="TextBox" x:Key="S_TextBox_MultilineInput" BasedOn="{StaticResource S_TextBox_Input}">
            <Setter Property="MinLines" Value="3"></Setter>
            <Setter Property="AcceptsReturn" Value="true"></Setter>
            <Setter Property="TextWrapping" Value="Wrap"></Setter>
        </Style>

        <Style TargetType="TextBox" x:Key="S_TextBox_Input_NumericUpDown_Float"></Style>

        <Style TargetType="GridSplitter" x:Key="S_GridSplitter">
            <Setter Property="HorizontalAlignment" Value="Center"></Setter>
            <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
            <Setter Property="Width" Value="4"></Setter>
        </Style>

        <Style TargetType="Button" x:Key="S_Button_GroupBox.Header"></Style>

        <Style TargetType="Button" x:Key="S_Button_Link"></Style>



        <!-- Items -->

        <Style TargetType="Border" x:Key="S_Border_Selector"></Style>

        <Style TargetType="TextBlock" x:Key="S_TextBlock_Selector_Icon"></Style>

        <Style TargetType="TextBlock" x:Key="S_TextBlock_Selector_Name"></Style>



        <!-- Main Menu -->

        <Style TargetType="Button" x:Key="S_Button_MainMenu"></Style>

        <Style TargetType="Separator" x:Key="S_Separator_MainMenu">
            <Setter Property="Width" Value="16"></Setter>
        </Style>

        <Style TargetType="Button" x:Key="S_Button_TabMenu"></Style>

        <Style TargetType="TextBox" BasedOn="{StaticResource S_TextBox_Input}" x:Key="S_TextBox_Input_Filter"></Style>



        <!-- Graph -->

        <Style TargetType="Button" x:Key="S_Button_Graph"></Style>

        <Style TargetType="Button" x:Key="S_Button_Graph_Selectable" BasedOn="{StaticResource S_Button_Graph}"></Style>

        <Style TargetType="Button" x:Key="S_Button_Graph_Selectable_Selected" BasedOn="{StaticResource S_Button_Graph_Selectable}">
            <Setter Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
        </Style>

        <Style TargetType="Separator" x:Key="S_Separator_Graph">
            <Setter Property="Width" Value="4"></Setter>
        </Style>

        <Style TargetType="TextBlock" BasedOn="{StaticResource S_TextBlock}" x:Key="S_TextBlock_Graph"></Style>

        <Style TargetType="TextBlock" BasedOn="{StaticResource S_TextBlock}" x:Key="S_TextBlock_PreviewLink">
            <Setter Property="Foreground" Value="White"></Setter>
            <Setter Property="FontSize" Value="8"></Setter>
        </Style>
        
        <Style TargetType="TextBox" BasedOn="{StaticResource S_TextBox_Input}" x:Key="S_TextBox_Input_Graph"></Style>



        <!-- Node -->

        <Style TargetType="Label" x:Key="S_Label_Node">
            <Setter Property="IsHitTestVisible" Value="False"></Setter>
        </Style>

        <Style TargetType="TextBlock" BasedOn="{StaticResource S_TextBlock}" x:Key="S_TextBlock_Node_Header"></Style>

        <Style TargetType="TextBlock" BasedOn="{StaticResource S_TextBlock}" x:Key="S_TextBlock_Node_Description"></Style>

        <Style TargetType="TextBlock" BasedOn="{StaticResource S_TextBlock}" x:Key="S_TextBlock_Node_Result"></Style>

        <Style TargetType="Border" x:Key="S_Border_Node">
            <Setter Property="BorderThickness" Value="4"></Setter>
            <Setter Property="MinHeight" Value="{StaticResource Double_Node_MinHeight}"></Setter>
            <Setter Property="MinWidth" Value="{StaticResource Double_Node_MinWidth}"></Setter>
            <Setter Property="MaxHeight" Value="{StaticResource Double_Node_MaxHeight}"></Setter>
            <Setter Property="MaxWidth" Value="{StaticResource Double_Node_MaxWidth}"></Setter>
            <Setter Property="ToolTip" Value="{Binding Id, Mode=OneTime}"></Setter>
            <Setter Property="Background" Value="White"></Setter>
            <Setter Property="bhvrs:RenderSizeBehavior.ActualWidth" Value="{Binding Width, UpdateSourceTrigger=PropertyChanged, Mode=OneWayToSource}"></Setter>
            <Setter Property="bhvrs:RenderSizeBehavior.ActualHeight" Value="{Binding Height, UpdateSourceTrigger=PropertyChanged, Mode=OneWayToSource}"></Setter>
            <Setter Property="bhvrs:RenderSizeBehavior.IsEnabled" Value="true"></Setter>
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"></Setter>
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX="{Binding Path=DataContext.ScaleX, RelativeSource={RelativeSource AncestorType=ItemsControl}, UpdateSourceTrigger=PropertyChanged}"
                                    ScaleY="{Binding Path=DataContext.ScaleY, RelativeSource={RelativeSource AncestorType=ItemsControl}, UpdateSourceTrigger=PropertyChanged}"></ScaleTransform>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter Property="BorderBrush" Value="{StaticResource Color_Node_Selected}"></Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        
        
        <!-- Data Templates -->

        <DataTemplate DataType="{x:Type vm:FolderProxyM}">
            <Button Style="{StaticResource S_Button_GroupBox.Header}" Content="Up" Command="{Binding Path=DataContext.UpContextCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}"></Button>
        </DataTemplate>

        <DataTemplate DataType="{x:Type m:FolderM}">
            <Button Style="{StaticResource S_Button_Link}" Content="{Binding name}" Command="{Binding Path=DataContext.SetContextCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></Button>
        </DataTemplate>

        <ItemsPanelTemplate x:Key="IPT_WrapPanel">
            <WrapPanel></WrapPanel>
        </ItemsPanelTemplate>

        <ItemsPanelTemplate x:Key="IPT_Canvas">
            <Canvas ClipToBounds="True"></Canvas>
        </ItemsPanelTemplate>

        <DataTemplate DataType="{x:Type vm:StorylineVM}" x:Key="DT_StorylineVM_Tabs">
            <StackPanel Orientation="Horizontal">
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding CharactersTabCommand}">Characters</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding ItemsTabCommand}">Items</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding ActorsTabCommand}">Actors</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding JournalTabCommand}">Journal</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding DialogsTabCommand}">Dialogs</Button>
                <Button Style="{StaticResource S_Button_TabMenu}" Command="{Binding ReplicasTabCommand}">Replicas</Button>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:StorylineVM}" x:Key="DT_StorylineVM_Filter">
            <TextBox Style="{StaticResource S_TextBox_Input_Filter}" Text="{Binding Filter, UpdateSourceTrigger=PropertyChanged}"></TextBox>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:StorylineVM}" x:Key="DT_StorylineVM_Selection">
            <ContentControl Content="{Binding Selection, UpdateSourceTrigger=PropertyChanged}"></ContentControl>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:CollectionVM}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="auto"></ColumnDefinition>
                    <ColumnDefinition Width="5*"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Style="{StaticResource S_TextBlock_GroupBox.Header}"></TextBlock>

                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding AddCommand}" CommandParameter="{StaticResource False}">A</Button>
                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding AddCommand}" CommandParameter="{StaticResource True}">AF</Button>
                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding RemoveCommand}">R</Button>

                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding CutCommand}" CommandParameter="{Binding Selection, UpdateSourceTrigger=PropertyChanged}">C</Button>
                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding PasteCommand}" CommandParameter="{Binding Selection, UpdateSourceTrigger=PropertyChanged}">P</Button>

                        <Button Style="{StaticResource S_Button_GroupBox.Header}" Command="{Binding InfoCommand}" CommandParameter="{Binding Selection, UpdateSourceTrigger=PropertyChanged}">I</Button>
                    </StackPanel>

                    <GroupBox Grid.Row="1">
                        <GroupBox.Header>
                            <ItemsControl ItemsPanel="{StaticResource IPT_WrapPanel}" ItemsSource="{Binding Context}"></ItemsControl>
                        </GroupBox.Header>

                        <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsControl ItemsSource="{Binding ItemsVMs}"></ItemsControl>
                        </ScrollViewer>
                    </GroupBox>
                </Grid>

                <GridSplitter Grid.Column="1" Style="{StaticResource S_GridSplitter}"></GridSplitter>

                <ContentControl Grid.Column="2" Content="{Binding SelectionEditor, UpdateSourceTrigger=PropertyChanged}"></ContentControl>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:FolderVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftDoubleClick" Command="{Binding Path=DataContext.SetContextCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}"
                                  CommandParameter="{Binding Model}"/>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="🗀" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:FolderEditorVM}">
            <StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:CharacterVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="👥" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:CharacterEditorVM}">
            <StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <CheckBox IsChecked="{Binding HasDescriptionFemale, UpdateSourceTrigger=PropertyChanged}">HasDescriptionFemale</CheckBox>
                <TextBox Text="{Binding DescriptionFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <TextBox Text="{Binding ActorName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding ClassPathName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding InitialRelation, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input_NumericUpDown_Float}"></TextBox>
                <TextBox Text="{Binding InitialRelationFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input_NumericUpDown_Float}"></TextBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ActorVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="🧊" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ActorEditorVM}">
            <StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <CheckBox IsChecked="{Binding HasDescriptionFemale, UpdateSourceTrigger=PropertyChanged}">HasDescriptionFemale</CheckBox>
                <TextBox Text="{Binding DescriptionFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <TextBox Text="{Binding ActorName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding ClassPathName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ItemVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="💰" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ItemEditorVM}">
            <StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <CheckBox IsChecked="{Binding HasDescriptionFemale, UpdateSourceTrigger=PropertyChanged}">HasDescriptionFemale</CheckBox>
                <TextBox Text="{Binding DescriptionFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <TextBox Text="{Binding ActorName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <TextBox Text="{Binding ClassPathName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_Input}"></TextBox>
                <CheckBox IsChecked="{Binding HasInternalDescription, UpdateSourceTrigger=PropertyChanged}">HasInternalDescription</CheckBox>
                <TextBox Text="{Binding InternalDescription, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
                <CheckBox IsChecked="{Binding HasInternalDescriptionFemale, UpdateSourceTrigger=PropertyChanged}">HasInternalDescriptionFemale</CheckBox>
                <TextBox Text="{Binding InternalDescriptionFemale, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBox_MultilineInput}"></TextBox>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmg:QuestVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="📝" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmg:QuestEditorVM}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="7*"></ColumnDefinition>
                    <ColumnDefinition Width="auto"></ColumnDefinition>
                    <ColumnDefinition Width="3*"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <ItemsControl x:Name="ic_Canvas" Background="LightGray" ItemsPanel="{StaticResource IPT_Canvas}" ItemsSource="{Binding ItemsVMs}"
                              bhvrs:MouseExtBehavior.MouseRightButtonDownCommand="{Binding DragCommand}"
                              bhvrs:MouseExtBehavior.MouseLeftButtonDownCommand="{Binding AddCommand}"
                              bhvrs:MouseExtBehavior.MouseLeftButtonUpCommand="{Binding LinkCommand}"
                              bhvrs:MouseExtBehavior.MouseMoveCommand="{Binding MoveCommand}"
                              bhvrs:MouseExtBehavior.MouseWheelCommand="{Binding ScaleCommand}"
                              bhvrs:LoadUnloadExtBehavior.LoadedCommand="{Binding InitCommand}"
                              bhvrs:RenderSizeBehavior.IsEnabled="true"
                              bhvrs:RenderSizeBehavior.ActualWidth="{Binding ViewWidth, UpdateSourceTrigger=PropertyChanged, Mode=OneWayToSource}"
                              bhvrs:RenderSizeBehavior.ActualHeight="{Binding ViewHeight, UpdateSourceTrigger=PropertyChanged, Mode=OneWayToSource}"
                              bhvrs:RenderSizeBehavior.SizeChangedFlag="{Binding SizeChangedFlag, UpdateSourceTrigger=PropertyChanged, Mode=OneWayToSource}">
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left" Value="{Binding Left, UpdateSourceTrigger=PropertyChanged}"/>
                            <Setter Property="Canvas.Top" Value="{Binding Top, UpdateSourceTrigger=PropertyChanged}"/>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                </ItemsControl>

                <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
                    <Grid.RowDefinitions>
                        <RowDefinition></RowDefinition>
                        <RowDefinition></RowDefinition>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <Button x:Name="btn_selectable_Step" Style="{StaticResource S_Button_Graph_Selectable}" Content="{StaticResource String_Icon_Node_Step}" Command="{Binding SelectNodeTypeCommand}" CommandParameter="{x:Type mn:Node_StepM}"></Button>
                        <Button x:Name="btn_selectable_Alternative" Style="{StaticResource S_Button_Graph_Selectable}" Content="{StaticResource String_Icon_Node_Alternative}" Command="{Binding SelectNodeTypeCommand}" CommandParameter="{x:Type mn:Node_AlternativeM}"></Button>
                        <Separator Style="{StaticResource S_Separator_Graph}"></Separator>
                        <Button Style="{StaticResource S_Button_Graph}" Content="⏪" Command="{Binding PrevRootNodeCommand}"></Button>
                        <Button Style="{StaticResource S_Button_Graph}" Content="⏩" Command="{Binding NextRootNodeCommand}"></Button>
                    </StackPanel>
                    <TextBlock Grid.Row="1" Text="{Binding SelectedNodeTypeName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Graph}"></TextBlock>
                </Grid>

                <GridSplitter Grid.Column="1" Style="{StaticResource S_GridSplitter}"></GridSplitter>

                <ContentControl Grid.Column="2" Content="{Binding SelectionEditor, UpdateSourceTrigger=PropertyChanged}"></ContentControl>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding SelectedNodeType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Type mn:Node_StepM}">
                    <Setter TargetName="btn_selectable_Step" Property="Style" Value="{StaticResource S_Button_Graph_Selectable_Selected}"></Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding SelectedNodeType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Type mn:Node_AlternativeM}">
                    <Setter TargetName="btn_selectable_Alternative" Property="Style" Value="{StaticResource S_Button_Graph_Selectable_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmg:DialogVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="💬" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmg:DialogEditorVM}">
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmg:ReplicaVM}">
            <Border x:Name="br_Main" Style="{StaticResource S_Border_Selector}">
                <Border.InputBindings>
                    <MouseBinding Gesture="LeftClick" Command="{Binding Path=DataContext.SelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}"></MouseBinding>
                </Border.InputBindings>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="🗣" Style="{StaticResource S_TextBlock_Selector_Icon}"></TextBlock>
                    <TextBlock Grid.Column="1" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource S_TextBlock_Selector_Name}"></TextBlock>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="true">
                    <Setter TargetName="br_Main" Property="Background" Value="{StaticResource Color_Selector_Selected}"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmg:ReplicaEditorVM}">
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmn:Node_Journal_StepVM}">
            <Border Style="{StaticResource S_Border_Node}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"></RowDefinition>
                        <RowDefinition></RowDefinition>
                        <RowDefinition></RowDefinition>
                    </Grid.RowDefinitions>

                    <Label Content="{StaticResource String_Icon_Node_Step}" Style="{StaticResource S_Label_Node}"></Label>

                    <TextBlock Grid.Column="1" Grid.Row="0" Style="{StaticResource S_TextBlock_Node_Header}" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"></TextBlock>

                    <TextBlock Grid.ColumnSpan="2" Grid.Row="1" Style="{StaticResource S_TextBlock_Node_Description}" Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}"></TextBlock>

                    <TextBlock Grid.ColumnSpan="2" Grid.Row="1" Style="{StaticResource S_TextBlock_Node_Result}" Text="{Binding Result, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmn:Node_Journal_StepEditorVM}"></DataTemplate>

        <DataTemplate DataType="{x:Type vmn:Node_Journal_AlternativeVM}">
            <Border Style="{StaticResource S_Border_Node}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"></RowDefinition>
                        <RowDefinition></RowDefinition>
                        <RowDefinition></RowDefinition>
                    </Grid.RowDefinitions>

                    <Label Content="{StaticResource String_Icon_Node_Alternative}" Style="{StaticResource S_Label_Node}"></Label>

                    <TextBlock Grid.Column="1" Grid.Row="0" Style="{StaticResource S_TextBlock_Node_Header}" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"></TextBlock>

                    <TextBlock Grid.ColumnSpan="2" Grid.Row="1" Style="{StaticResource S_TextBlock_Node_Description}" Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}"></TextBlock>

                    <TextBlock Grid.ColumnSpan="2" Grid.Row="1" Style="{StaticResource S_TextBlock_Node_Result}" Text="{Binding Result, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vmn:Node_Journal_AlternativeEditorVM}"></DataTemplate>

        <DataTemplate DataType="{x:Type vmn:PreviewLinkVM}">
            <Grid IsHitTestVisible="False">
                <Line x:Name="ln_Main" X1="0" Y1="0"
                  X2="{Binding HandleX, UpdateSourceTrigger=PropertyChanged}" Y2="{Binding HandleY, UpdateSourceTrigger=PropertyChanged}"
                  StrokeThickness="{StaticResource Double_PreviewLink_StrokeThickness}" Stroke="{StaticResource Color_PreviewLink_Disallow}">
                </Line>
                <Grid x:Name="gr_Hint" VerticalAlignment="Center" HorizontalAlignment="Center" MinHeight="{StaticResource Double_PreviewLink_MinHeight}" MinWidth="{StaticResource Double_PreviewLink_MinWidth}">
                    <Ellipse x:Name="ell_Description" Fill="{StaticResource Color_PreviewLink_Disallow}" Stroke="White"></Ellipse>
                    <TextBlock x:Name="tb_Description" VerticalAlignment="Center" HorizontalAlignment="Center" Text="⤫" Style="{StaticResource S_TextBlock_PreviewLink}"></TextBlock>
                </Grid>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                    <Setter TargetName="ln_Main" Property="Line.Stroke" Value="{StaticResource Color_PreviewLink_Base}"></Setter>
                    <Setter TargetName="gr_Hint" Property="Visibility" Value="Collapsed"></Setter>
                    <Setter TargetName="ell_Description" Property="Ellipse.Fill" Value="{StaticResource Color_PreviewLink_Base}"></Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Description, UpdateSourceTrigger=PropertyChanged}" Value="">
                    <Setter TargetName="ln_Main" Property="Line.Stroke" Value="{StaticResource Color_PreviewLink_Allow}"></Setter>
                    <Setter TargetName="gr_Hint" Property="Visibility" Value="Visible"></Setter>
                    <Setter TargetName="ell_Description" Property="Ellipse.Fill" Value="{StaticResource Color_PreviewLink_Allow}"></Setter>
                    <Setter TargetName="tb_Description" Property="Text" Value="✓"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
        
    </Application.Resources>
</Application>